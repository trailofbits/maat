# (1) Load instructions
# (2) Store instructions
# (9) Data manipulation instructions



#####################################################
#####		  	Load			#####
#####################################################


# LD.B disp16[reg1], reg2 - rrrrr111000RRRRR|dddddddddddddddd
:ld.b s1631[R0004], R1115 is op0510=0x38 & R0004 & R1115; s1631
{
	local adr:4 = R0004 + s1631;
	R1115 = sext(*:1 adr);
}

# LD.B disp23[reg1], reg3 - rrrrr111100RRRRR|wwwwwddddddd0101|DDDDDDDDDDDDDDDD
:ld.b disp23[R0004], R2731 is op0515=0x3C & R0004; R2731 & op2026 & op1619=0x5; s3247
[ disp23 = (s3247 << 7) | op2026; ]
{
	local adr:4 = R0004 + disp23;
	R2731 = sext(*:1 adr);
}

# LD.BU disp16[reg1], reg2 - rrrrr11110bRRRRR|ddddddddddddddd1
:ld.bu disp16[R0004], R1115 is op0610=0x1E & R0004 & R1115 & op0505; op1616=0x1 & s1731 
[ disp16 = (s1731 << 1) | op0505; ]
{
	local adr:4 =  R0004 + disp16;
	R1115 = zext(*:1 adr);
}

# LD.BU disp23[reg1], reg3 - 00000111101RRRRR|wwwwwddddddd0101|DDDDDDDDDDDDDDDD
:ld.bu disp23[R0004], R2731 is op0515=0x3D & R0004; R2731 & op2026 & op1619=0x5; s3247
[ disp23 = (s3247 << 7) | op2026; ]
{
	local adr:4 = R0004 + disp23;
	R2731 = zext(*:1 adr);
}

# LD.H disp16[reg1], reg2 - rrrrr111001RRRRR|ddddddddddddddd0
:ld.h s1631[R0004], R1115 is op0510=0x39 & R0004 & R1115; s1631 & op1616=0x0
{
	local adr:4 = R0004 + s1631;
	R1115 = sext(*:2 adr);
}

# LD.H disp23[reg1], reg3 - 00000111100RRRRR|wwwwwdddddd00111|DDDDDDDDDDDDDDDD
:ld.h disp23[R0004], R2731 is op0515=0x3C & R0004; R2731 & op2126 & op1620=0x7; s3247
[ disp23 = (s3247 << 7) | (op2126 << 1); ]
{
	local adr:4 = R0004 + disp23;
	R2731 = sext(*:2 adr);
}

# LD.HU disp16[reg1], reg2 - rrrrr111111RRRRR|ddddddddddddddd1
:ld.hu disp16[R0004], R1115 is op0510=0x3F & R0004 & R1115; op1616=0x1 & s1731 
[ disp16 = s1731 << 1; ]
{
	local adr:4 = R0004 + disp16;
	R1115 = zext(*:2 adr);
}

# LD.HU disp23[reg1], reg3 - 00000111101RRRRR|wwwwwdddddd00111|DDDDDDDDDDDDDDDD
:ld.hu disp23[R0004], R2731 is op0515=0x3D & R0004; R2731 & op2026 & op1619=0x7; s3247
[ disp23 = (s3247 << 7) | op2026; ]
{
	local adr:4 = R0004 + disp23;
	R2731 = zext(*:2 adr);
}

# LD.W disp16[reg1], reg2 - rrrrr111001RRRRR|ddddddddddddddd1
:ld.w disp16[R0004], R1115 is op0510=0x39 & R0004 & R1115; s1731 & op1616=0x1 
[ disp16 = s1731 * 2; ]
{
	local adr:4 = R0004 + disp16;
	R1115 = *:4 adr;
}

# LD.W disp23[reg1], reg3 - 00000111100RRRRR|wwwwwdddddd01001|DDDDDDDDDDDDDDDD
:ld.w disp23[R0004], R2731 is op0515=0x03C & R0004; R2731 & op2126 & op1620=0x9; s3247
[ disp23 = (s3247 << 7) | (op2126 << 1); ]
{
	local adr:4 = R0004 + disp23;
	R2731 = *:4 adr;
}

# SLD.B disp7[ep], reg2 - rrrrr0110ddddddd
:sld.b op0006[ep], R1115 is op0710=0x06 & op0006 & R1115 & ep
{
	local adr:4 = ep + op0006;
	R1115 = sext(*:1 adr);
}

# SLD.BU disp4[ep], reg2 - rrrrr0000110dddd
:sld.bu op0003[ep], R1115 is op0410=0x06 & R1115 & op0003 & ep
{
	local adr:4 = ep + op0003;
	R1115 = zext(*:1 adr);
}

# SLD.H disp8[ep], reg2 - rrrrr1000ddddddd
:sld.h disp8[ep], R1115 is op0710=0x08 & op0006 & R1115 & ep
[ disp8 = op0006 * 2; ]
{
	local adr:4 = ep + disp8;
	R1115 = sext(*:2 adr);
}

# SLD.HU disp5[ep], reg2 - rrrrr0000111dddd
:sld.hu disp5[ep], R1115 is op0410=0x07 & R1115 & op0003 & ep
[ disp5 = op0003 * 2; ]
{
	local adr:4 = ep + disp5;
	R1115 = zext(*:2 adr);
}

# SLD.W disp8[ep], reg2 - rrrrr1010dddddd0
:sld.w disp8[ep], R1115 is op0710=0x0A & op0000=0x0 & op0106 & R1115 & ep
[ disp8 = op0106 * 4; ]
{
	local adr:4 = ep + disp8;
	R1115 = *:4 adr;
}



#####################################################
#####		 	Store			#####
#####################################################


# SST.B reg2, disp7[ep] - rrrrr0111ddddddd
:sst.b R1115, op0006[ep] is op0710=0x07 & op0006 & R1115 & ep
{
	local adr:4 = ep + op0006;
	local tmp:4 = R1115;
	*:1 adr = tmp:1;
}

# SST.H reg2, disp8[ep] - rrrrr1001ddddddd
:sst.h R1115, disp8[ep] is op0710=0x09 & op0006 & R1115 & ep
[ disp8 = op0006 * 2; ]
{
	local adr:4 = ep + disp8;
	local tmp:4 = R1115;
	*:2 adr = tmp:2;
}

# SST.W reg2, disp8[ep] - rrrrr1010dddddd1
:sst.w R1115, disp8[ep] is op0710=0x0A & op0000=0x1 & op0106 & R1115 & ep
[ disp8 = op0106 * 4; ]
{
	local adr:4 = ep + disp8;
	local tmp:4 = R1115;
	*:4 adr = tmp;
}

# ST.B reg2, disp16[reg1] - rrrrr111010RRRRR|dddddddddddddddd
:st.b R1115, s1631[R0004] is op0510=0x3A & R0004 & R1115; s1631
{
	local adr:4 = R0004 + s1631;
	local tmp:4 = R1115;
	*:1 adr = tmp:1;
}

# ST.B reg3, disp23[reg1] - 00000111100RRRRR|dddddddddddddddd
:st.b R2731, disp23[R0004] is op0515=0x3C & R0004; R2731 & op2026 & op1619=0xD; s3247
[ disp23 = (s3247 << 7) | op2026; ]
{
	local adr:4 = R0004 + disp23;
	local tmp:4 = R2731;
	*:1 adr = tmp:1;
}

# ST.H reg2, disp16[reg1] - rrrrr111011RRRRR|ddddddddddddddd0
:st.h R1115, s1631[R0004] is op0510=0x3B & R0004 & R1115; s1631 & op1616=0x0
{
	local adr:4 = R0004 + s1631;
	local tmp:4 = R1115;
	*:2 adr = tmp:2;
}

# ST.H reg3, disp23[reg1] - 00000111101RRRRR|wwwwwdddddd01101|DDDDDDDDDDDDDDDD
:st.h R2731, disp23[R0004] is op0515=0x3D & R0004; R2731 & op2126 & op1620=0xD; s3247
[ disp23 = (s3247 << 7) | (op2126 << 1); ]
{
	local adr:4 = R0004 + disp23;
	local tmp:4 = R2731;
	*:2 adr = tmp:2;
}

# ST.W reg2, disp16[reg1] - rrrrr111011RRRRR|ddddddddddddddd1
:st.w R1115, disp16[R0004] is op0510=0x3B & R0004 & R1115; s1731 & op1616=0x1 
[ disp16 = s1731 * 2; ]
{
	local adr:4 = R0004 + disp16;
	local tmp:4 = R1115;
	*:4 adr = tmp;
}

# ST.W reg3, disp23[reg1] - 00000111100RRRRR|wwwwwdddddd01111|DDDDDDDDDDDDDDDD
:st.w R2731, disp23[R0004] is op0515=0x3C & R0004; R2731 & op2126 & op1620=0xF; s3247
[ disp23 = (s3247 << 7) | (op2126 << 1); ]
{
	local adr:4 = R0004 + disp23;
	local tmp:4 = R2731;
	*:2 adr = tmp:2;
}



#####################################################
#####		   DataManipulation		#####
#####################################################


# BSH reg2, reg3 - rrrrr11111100000|wwwww01101000010
:bsh R1115, R2731 is op0010=0x7E0 & R1115; op1626=0x342 & R2731
{
	local x1 = R1115[0,8];
	local x2 = R1115[8,8];
	local x3 = R1115[16,8];
	local x4 = R1115[24,8];
	R2731 = zext(x3 << 24) | zext(x4 << 16) | zext(x1 << 8) | zext(x2);
	set_S(R2731);
	$(OV) = 0;
	$(Z) = (x1 == 0) && (x2 == 0);
	$(CY) = (x1 == 0) || (x2 == 0);
}

# BSW reg2, reg3 - rrrrr11111100000|wwwww01101000000
:bsw R1115, R2731 is op0010=0x7E0 & R1115; op1626=0x340 & R2731
{
	local x1 = R1115[0,8];
	local x2 = R1115[8,8];
	local x3 = R1115[16,8];
	local x4 = R1115[24,8];
	R2731 = zext(x1 << 24) | zext(x2 << 16) | zext(x3 << 8) | zext(x4);
	set_OV0_S_Z(R2731);
	$(CY) = (x1 == 0) || (x2 == 0) || (x3 == 0) || (x4 == 0);
}

# CMOV cccc, reg1, reg2, reg3 - rrrrr111111RRRRR|wwwww011001cccc0
:cmov^c1720 R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op2126=0x19 & op1616=0 & c1720 & R2731
{
	local result:4 = zext(c1720);
	R2731 = R0004 * zext(result != 0) + R1115 * zext(result == 0);
}

# CMOV cccc, imm5, reg2, reg3 - rrrrr111111iiiii|wwwww011000cccc0
:cmov^c1720 s0004, R1115, R2731 is op0510=0x3F & s0004 & R1115; op2126=0x18 & op1616=0 & c1720 & R2731
{
	local result:4 = zext(c1720);
	R2731 = s0004 * zext(result != 0) + R1115 * zext(result == 0);
}

# HSH reg2, reg3 - rrrrr11111100000|wwwww01101000110
:hsh R1115, R2731 is op0010=0x7E0 & R1115; op1626=0x346 & R2731
{
	R2731 = R1115;
	set_S(R2731);
	$(OV) = 0;
	$(Z) = (R2731:2 == 0);
	$(CY) = $(Z);
}

# HSW reg2, reg3 - rrrrr11111100000|wwwww01101000100
:hsw R1115, R2731 is op0010=0x7E0 & R1115; op1626=0x344 & R2731
{
	local x1 = R1115:2;
	local x2 = R1115[16,16];
	R2731 = zext(x1 << 16) | zext(x2);
	set_OV0_S_Z(R2731);
	$(CY) = (x1 == 0) || (x2 == 0);
}

# SAR reg1, reg2 - rrrrr111111RRRRR|0000000010100000
:sar R0004, R1115 is op0510=0x3F & R0004 & R1115; op1631=0xA0
{
	shift_right_arith(R1115, R1115, R0004);
}

# SAR imm5, reg2 - rrrrr010101iiiii
:sar op0004, R1115 is op0510=0x15 & op0004 & R1115
{
	shift_right_arith(R1115, R1115, op0004:5);
}

# SAR reg1, reg2, reg3 - rrrrr111111RRRRR|wwwww00010100010
:sar R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0xA2 & R2731
{
	shift_right_arith(R2731, R1115, R0004);
}

# SASF cccc, reg2 - rrrrr1111110cccc|0000001000000000
:sasf^c0003 R1115 is op0410=0x7E & c0003 & R1115; op1631=0x0200
{
	R1115 = (R1115 << 1) | zext(c0003);
}

# SETF cond, reg2 - rrrrr1111110cccc|0000000000000000
:setf^c0003 R1115 is op0410=0x7E & c0003 & R1115; op1631=0x0
{
	R1115 = zext(c0003);
}

# SHL reg1, reg2 - rrrrr111111RRRRR|0000000011000000
:shl R0004, R1115 is op0510=0x3F & R0004 & R1115; op1631=0xC0
{
	shift_left_logic(R1115, R1115, R0004);
}

# SHL imm5, reg2 - rrrrr010110iiiii
:shl op0004, R1115 is op0510=0x16 & op0004 & R1115
{
	shift_left_logic(R1115, R1115, op0004:5);
}

# SHL reg1, reg2, reg3 - rrrrr111111RRRRR|wwwww00011000010
:shl R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0xC2 & R2731
{
	shift_left_logic(R2731, R1115, R0004);
}

# SHR reg1, reg2 - rrrrr111111RRRRR|0000000010000000
:shr R0004, R1115 is op0510=0x3F & R0004 & R1115; op1631=0x80
{
	shift_right_logic(R1115, R1115, R0004);
}

# SHR imm5, reg2 - rrrrr010100iiiii
:shr op0004, R1115 is op0510=0x14 & op0004 & R1115
{
	shift_right_logic(R1115, R1115, op0004:5);
}

# SHR reg1, reg2, reg3 - rrrrr111111RRRRR|wwwww00010000010
:shr R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x82 & R2731
{
	shift_right_logic(R2731, R1115, R0004);
}

# SXB reg1 - 00000000101RRRRR
:sxb R0004 is op0515=0x05 & R0004
{
	R0004 = sext(R0004:1);
}

# SXH reg1 - 00000000111RRRRR
:sxh R0004 is op0515=0x07 & R0004
{
	R0004 = sext(R0004:2);
}

# ZXB reg1 - 00000000100RRRRR
:zxb R0004 is op0515=0x004 & R0004
{
	R0004 = zext(R0004:1);
}

# ZXH reg1 - 00000000110RRRRR
:zxh R0004 is op0515=0x006 & R0004
{
	R0004 = zext(R0004:2);
}
